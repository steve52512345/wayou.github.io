I"t:<h2 id="typescript-实现任务队列">TypeScript 实现任务队列</h2>

<p>业务中经常会有一些批量操作的任务，比如使用 JavaScript 预加载一组图片，批量上传一些资源。如果这些任务一次性启动，势必会消耗很多资源和带宽。理想的做法应该对这些任务进行限制，比如一次只跑几个，当其中一些任务完成后，再添加新的任务到队列。</p>

<p>总的来说，我们需要这样一个服务，它提供一个添加任务的方法，内部将添加的方法维护在一个数组。然后根据设置的阈值，即同时可跑的任务数，来执行这些任务。</p>

<p>同时为了打日志方便，注册的任务可指定一个名称，所以一个任务的类型看起来应该像这样：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Task</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">name</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">fn</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>
<p>其中 <code class="language-plaintext highlighter-rouge">name</code> 方便调试，<code class="language-plaintext highlighter-rouge">fn</code> 便是需要执行的任务，它应该是一个比较耗时的异步任务，所以调用后返回 Promise。</p>

<p>运行任务的服务：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">TaskRunner</span> <span class="p">{</span>
  <span class="k">private</span> <span class="nx">queue</span><span class="p">:</span> <span class="nx">Task</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">private</span> <span class="nx">activeTaskNum</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">limit</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="k">public</span> <span class="nx">debug</span> <span class="o">=</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">limit</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">limit must be interger greater then 1</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="nx">addTask</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">task</span><span class="p">:</span> <span class="nx">Task</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">task</span><span class="p">.</span><span class="nx">name</span> <span class="p">?</span> <span class="nx">task</span><span class="p">.</span><span class="nx">name</span> <span class="p">:</span> <span class="nx">task</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">length</span> <span class="o">||</span> <span class="dl">""</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">task</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">runTask</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">private</span> <span class="nx">execute</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">task</span><span class="p">:</span> <span class="nx">Task</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`running </span><span class="p">${</span><span class="nx">task</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">task</span>
      <span class="p">.</span><span class="nx">fn</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">ressult</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`task </span><span class="p">${</span><span class="nx">task</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2"> finished`</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">ressult</span><span class="p">;</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">task</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2"> failed`</span><span class="p">);</span>
        <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">finally</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">activeTaskNum</span><span class="o">--</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">runTask</span><span class="p">();</span>
      <span class="p">});</span>
  <span class="p">}</span>

  <span class="k">private</span> <span class="nx">runTask</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">activeTaskNum</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">limit</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">task</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">activeTaskNum</span><span class="o">++</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">execute</span><span class="p">(</span><span class="nx">task</span><span class="o">!</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">private</span> <span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">debug</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">`[TaskRunner] </span><span class="p">${</span><span class="nx">msg</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>因为任务可以动态添加，所以在添加完任务的方法 <code class="language-plaintext highlighter-rouge">addTask()</code> 里就启动任务队列的执行 <code class="language-plaintext highlighter-rouge">runTask()</code>，无须外部显式触发。</p>

<p>测试上面的代码：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">TaskRunner</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./taskRunner</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">runner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TaskRunner</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">taskGenerator</span><span class="p">(</span><span class="nx">taskName</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">time</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="nx">taskName</span><span class="p">,</span>
    <span class="na">fn</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span>
      <span class="k">new</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">_reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">resolve</span><span class="p">(</span><span class="s2">`result for task </span><span class="p">${</span><span class="nx">taskName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
        <span class="p">},</span> <span class="nx">time</span><span class="p">);</span>
      <span class="p">})</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">errorTask</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">errroTask</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">fn</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span>
    <span class="k">new</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">((</span><span class="nx">_resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">reject</span><span class="p">(</span><span class="dl">"</span><span class="s2">errorTask failed</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>
    <span class="p">})</span>
<span class="p">};</span>

<span class="p">[</span><span class="nx">errorTask</span><span class="p">]</span>
  <span class="p">.</span><span class="nx">concat</span><span class="p">(</span>
    <span class="p">[...</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nx">keys</span><span class="p">()].</span><span class="nx">map</span><span class="p">((</span><span class="nx">_value</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span>
      <span class="nx">taskGenerator</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">index</span><span class="p">),</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">10000</span> <span class="o">+</span> <span class="mi">1000</span><span class="p">)</span>
    <span class="p">)</span>
  <span class="p">)</span>
  <span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">task</span> <span class="o">=&gt;</span> <span class="nx">runner</span><span class="p">.</span><span class="nx">addTask</span><span class="p">(</span><span class="nx">task</span><span class="p">));</span>
</code></pre></div></div>

<p>这里生成了 5 个任务，每个任务的耗时是随机的 1s ~ 10s。同时添加一个了个直接 <code class="language-plaintext highlighter-rouge">reject</code> 的任务来模拟任务失败时，不会影响其他任务的执行。</p>

<p><img src="https://user-images.githubusercontent.com/3783096/56847967-4ab33900-6915-11e9-8e05-806d85a1f473.gif" alt="任务运行效果" /></p>
<p align="center"></p>

<p>完整的代码移步 GitHub 仓库 <a href="https://github.com/wayou/task-runner">wayou/task-runner</a></p>

<h2 id="相关资源">相关资源</h2>

<ul>
  <li><a href="https://medium.freecodecamp.org/how-to-limit-concurrent-operations-in-javascript-b57d7b80d573">Limiting concurrent operations in JavaScript</a></li>
</ul>

:ET
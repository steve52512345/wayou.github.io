I"B<h1 id="理解-nodejs-的-event-loop">理解 Node.js 的 Event loop</h1>

<h2 id="问题">问题</h2>

<p>考察如下代码，脑回路中运行并输出结果：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="nx">setTimeout1</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">2</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="kd">function</span> <span class="nx">nextTick1</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">3</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="nx">promise1</span><span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">4</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">resolve</span><span class="p">();</span>
  <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="nx">promiseThen1</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">5</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="nx">setImmediate</span><span class="p">(</span><span class="kd">function</span> <span class="nx">immediate1</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">immediate</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="kd">function</span> <span class="nx">nextTick2</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">6</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">async start</span><span class="dl">"</span><span class="p">);</span>
  <span class="k">await</span> <span class="nx">bar</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">async end</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">foo</span><span class="p">();</span>

<span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="nx">promise2</span><span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">7</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">resolve</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="nx">promiseThen2</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">8</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="nx">setTimeout2</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">9</span><span class="dl">"</span><span class="p">);</span>
  
  <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="nx">promise3</span><span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">11</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">resolve</span><span class="p">();</span>
  <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="nx">promiseThen3</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">12</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="kd">function</span> <span class="nx">nextTick3</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">10</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="js-事件循环">JS 事件循环</h2>

<p>JS 是单线程，朴素地讲，同时只能完成一件事件。如果有耗时的任务，那后续的所有任务都要等待其完成才能执行。</p>

<p>为了避免这种阻塞，引入了事件循环。即，将代码的执行分成一个个很小的阶段（一次循环），每个阶段重复相应的事情，直到所有任务都完成。</p>

<p>一个阶段包含以下部分：</p>

<ul>
  <li>Timers：到期的定时器任务，<code class="language-plaintext highlighter-rouge">setTimeout</code>，<code class="language-plaintext highlighter-rouge">setInterval</code> 等注册的任务</li>
  <li>IO Callbacks：IO 操作，比如网络请求，文件读写</li>
  <li>IO Polling：IO 任务的注册</li>
  <li>Set Immediate：通过 <code class="language-plaintext highlighter-rouge">setImmediate</code> 注册的任务</li>
  <li>Close：<code class="language-plaintext highlighter-rouge">close</code> 事件的回调，比如 TCP 的断开</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/3783096/51124121-80498000-1858-11e9-8c69-33c760b08904.png" alt="image" /></p>
<p align="center">Ticks and Phases of the Node.js Event Loop <i>图片来自 Daniel Khan 的 Medium 博客，见文末</i></p>

<p>同步代码及上面每个环节结束时都会清空一遍微任务队列，记住这点很重要！</p>

<h2 id="代码执行流程">代码执行流程</h2>

<p>执行的流程是，</p>
<ul>
  <li>将代码顺序执行。</li>
  <li>遇到异步任务，将任务压入待执行队列后继续往下。</li>
  <li>完成同步代码后，检查是否有微任务（通过 <code class="language-plaintext highlighter-rouge">Promise</code>，<code class="language-plaintext highlighter-rouge">process.nextTick</code>，<code class="language-plaintext highlighter-rouge">async/await</code> 等注册），如果有，则清空。</li>
  <li>清空微任务队列后，从待执行队列中取出最先压入的任务顺序执行，重复步骤一。</li>
</ul>

<p>另，</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">async/await</code> 本质上是 <code class="language-plaintext highlighter-rouge">Promise</code>，所以其表现会和 Promise 一致。</li>
  <li><code class="language-plaintext highlighter-rouge">process.nextTick</code> 注册的回调优先级高于 Promise。</li>
  <li><code class="language-plaintext highlighter-rouge">setImmediate</code> 可看成 Node.js 版本的 <code class="language-plaintext highlighter-rouge">setTimeout</code>，所以可与后者同等对待。</li>
</ul>

<h2 id="示例代码分析">示例代码分析</h2>

<h3 id="round-1">Round 1</h3>

<ul>
  <li>首先遇到同步代码 <code class="language-plaintext highlighter-rouge">console.log(1)</code>，立即执行输出 <code class="language-plaintext highlighter-rouge">1</code></li>
  <li>接下来是一个 <code class="language-plaintext highlighter-rouge">setTimeout</code> 定时器，将其回调压入待执行队列 <code class="language-plaintext highlighter-rouge">[setTimeout1]</code></li>
  <li>遇到 <code class="language-plaintext highlighter-rouge">process.nextTick</code>，将其回调 <code class="language-plaintext highlighter-rouge">nextTick2</code> 压入微任务队列 <code class="language-plaintext highlighter-rouge">[nextTick2]</code></li>
  <li>然后是 async 函数 <code class="language-plaintext highlighter-rouge">foo</code> 的调用，立即执行并输出 <code class="language-plaintext highlighter-rouge">async start</code></li>
  <li>然后是 <code class="language-plaintext highlighter-rouge">await</code> 语句，这所在的地方会创建并返回 Promise，所以这里会执行其后面的表达式，也就是 <code class="language-plaintext highlighter-rouge">bar()</code> 函数的调用。</li>
  <li>执行 <code class="language-plaintext highlighter-rouge">bar</code> 函数，输出 <code class="language-plaintext highlighter-rouge">bar</code></li>
  <li>在执行了 <code class="language-plaintext highlighter-rouge">await </code> 后面的语句后，它所代表的 Promise 就创建完成了，<code class="language-plaintext highlighter-rouge">foo</code> 函数体后续的代码相当于 promise 的 <code class="language-plaintext highlighter-rouge">then</code>，放入微任务队列 <code class="language-plaintext highlighter-rouge">[nextTick2, rest_of_foo]</code></li>
  <li>继续往下遇到 <code class="language-plaintext highlighter-rouge">new Promise</code>，执行 Promise 的创建输出 <code class="language-plaintext highlighter-rouge">7</code>，将它的 <code class="language-plaintext highlighter-rouge">then</code> 回调压入微任务队列 <code class="language-plaintext highlighter-rouge">[nextTick2, rest_of_foo,promiseThen2]</code></li>
  <li>遇到另一个 <code class="language-plaintext highlighter-rouge">setTimeout</code>，回调压入待执行队列 <code class="language-plaintext highlighter-rouge">[setTimeout1，setTimeout2]</code></li>
  <li>至此，代码执行完了一轮。此时的输出应该是 <code class="language-plaintext highlighter-rouge">1, async start, bar,7</code></li>
</ul>

<h3 id="round-2">Round 2</h3>

<ul>
  <li>查看微任务队列，并清空。所以依次执行 <code class="language-plaintext highlighter-rouge">[nextTick2, rest_of_foo,promiseThen2]</code>，输出 <code class="language-plaintext highlighter-rouge">6,async end,8</code>。</li>
</ul>

<h3 id="round-3">Round 3</h3>

<ul>
  <li>查看待执行队列 <code class="language-plaintext highlighter-rouge">[setTimeout1，setTimeout2]</code>，先执行 <code class="language-plaintext highlighter-rouge">setTimout1</code></li>
  <li>遇到 <code class="language-plaintext highlighter-rouge">console.log(2)</code> 输出2</li>
  <li>遇到 <code class="language-plaintext highlighter-rouge">process.nextTick</code> 将 <code class="language-plaintext highlighter-rouge">nextTick1</code> 压入微任务队列 <code class="language-plaintext highlighter-rouge">[nextTick1]</code></li>
  <li>遇到 <code class="language-plaintext highlighter-rouge">new Promise</code> 立即执行 输出 <code class="language-plaintext highlighter-rouge">4</code>，执行 <code class="language-plaintext highlighter-rouge">resolve()</code> 后将 <code class="language-plaintext highlighter-rouge">promiseThen1</code> 压入微任务队列 <code class="language-plaintext highlighter-rouge">[nextTick1,promiseThen1]</code></li>
  <li>遇到 <code class="language-plaintext highlighter-rouge">setImmediate</code> 将回调压入待执行队列 <code class="language-plaintext highlighter-rouge">[setTimeout2,immediate1]</code></li>
  <li>此时 <code class="language-plaintext highlighter-rouge">setTimeout1</code> 执行完毕，此时的输出应该为  <code class="language-plaintext highlighter-rouge">2,4</code></li>
</ul>

<h3 id="round-4">Round 4</h3>

<ul>
  <li>检查微任务队列 <code class="language-plaintext highlighter-rouge">[nextTick1,promiseThen1]</code> 依次执行并输出 <code class="language-plaintext highlighter-rouge">3,5</code></li>
</ul>

<h3 id="round-5">Round 5</h3>

<ul>
  <li>检查待执行队列 <code class="language-plaintext highlighter-rouge">[setTimeout2,immediate1]</code>,执行 <code class="language-plaintext highlighter-rouge">setTimeout2</code></li>
  <li>遇到 <code class="language-plaintext highlighter-rouge">console</code>输出 <code class="language-plaintext highlighter-rouge">9</code></li>
  <li>遇到 <code class="language-plaintext highlighter-rouge">new Promise</code> 执行并输出 <code class="language-plaintext highlighter-rouge">11</code>,将 <code class="language-plaintext highlighter-rouge">promiseThen3</code> 压入微任务队列 <code class="language-plaintext highlighter-rouge">[promiseThen3]</code></li>
  <li>遇到 <code class="language-plaintext highlighter-rouge">process.nextTick</code> 将 <code class="language-plaintext highlighter-rouge">nextTick3</code> 压入微执行队列。注意，因为 <code class="language-plaintext highlighter-rouge">process.nextTick</code> 的优先级高于 Promise，所以压入后的结果是： <code class="language-plaintext highlighter-rouge">[nextTick3,promiseThen3]</code></li>
  <li>此时 <code class="language-plaintext highlighter-rouge">setTimeout2</code> 执行完毕，输出为 <code class="language-plaintext highlighter-rouge">9,11</code></li>
</ul>

<h3 id="round-6">Round 6</h3>

<ul>
  <li>检查微任务队列 <code class="language-plaintext highlighter-rouge">[nextTick3，promiseThen3]</code> 执行并输出  <code class="language-plaintext highlighter-rouge">10,12</code></li>
</ul>

<h3 id="round-7">Round 7</h3>

<ul>
  <li>检查待执行队列 <code class="language-plaintext highlighter-rouge">[immediate1]</code>，执行并输出 <code class="language-plaintext highlighter-rouge">immediate</code></li>
</ul>

<p>至此，走完了所有代码。</p>

<h2 id="结果">结果</h2>

<p>以下是文章开头的结果：</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
async start
bar
7
6
async end
8
2
4
3
5
9
11
10
12
immediate
</code></pre></div></div>

<h3 id="参考">参考</h3>

<ul>
  <li><a href="https://juejin.im/post/5a6155126fb9a01cb64edb45">Event Loop 的规范和实现</a></li>
  <li><a href="https://juejin.im/post/59e85eebf265da430d571f89">这一次，彻底弄懂 JavaScript 执行机制</a></li>
  <li><a href="https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c">What you should know to really understand the Node.js Event Loop</a></li>
</ul>

:ET
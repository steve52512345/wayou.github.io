I"<h1 id="whistle-mock-配置">Whistle mock 配置</h1>

<h2 id="安装依赖">安装依赖</h2>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm i <span class="nt">-g</span> whistle.vase
</code></pre></div></div>

<h2 id="配置-vase">配置 vase</h2>

<p>安装完成后，Whistle 插件界面会有对应展示，点击名称后进入插件配置界面，创建一个新的 mock 规则，引擎选择 「mock」:</p>

<p><img src="https://user-images.githubusercontent.com/3783096/93778459-83fdee80-fc58-11ea-92bb-7adf34fcb1ba.png" alt="image" />
￼</p>

<p>确定之后输入如下内容：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"list|3"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w">
    </span><span class="nl">"id|+1"</span><span class="p">:</span><span class="w"> </span><span class="mi">10000</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"@string"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"avatar"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://lorempixel.com/100/100/"</span><span class="w">
  </span><span class="p">}]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>更加详细的 mock 语法参见 <a href="https://github.com/nuysoft/Mock/wiki/Syntax-Specification">nuysoft/Mock Wiki</a>。</p>

<h2 id="配置-whistle-转发规则">配置 Whistle 转发规则</h2>

<p>添加 Whistle 转发规则，内容如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://mock.local/test.json vase://sample_json
</code></pre></div></div>

<p>实际使用时，编写规则转发需要被 mock 的后端接口地址即可。</p>

<h2 id="测试">测试</h2>

<p>完成上述配置后，访问 <a href="http://mock.local/test.json">http://mock.local/test.json</a> 可以看到 mock 返回：</p>

<p><img src="https://user-images.githubusercontent.com/3783096/93778469-87917580-fc58-11ea-8274-e8a6ed8acced.png" alt="image" />
￼</p>

<h2 id="跨域问题">跨域问题</h2>

<p>假如需要被 mock 的接口存在跨域的情况，浏览器会先发送 OPTIONS 请求。</p>

<p>而这个 OPTIONS 请求会因为代理没有返回正确的响应头配置而失败：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Access to fetch at 'https://some/api' from origin 'https://some/domain' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.
</code></pre></div></div>

<p>此时需要配置 Whistle 的响应头，以允许跨域。</p>

<p><code class="language-plaintext highlighter-rouge">resCors://*</code> 表示设置 <code class="language-plaintext highlighter-rouge">access-control-allow-origin: *</code>，在启用 credential 的情况下是不行的，所以此处使用 <code class="language-plaintext highlighter-rouge">resCors://enable</code>：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># `enable` 表示设置 access-control-allow-origin: http://originHost
# 及access-control-allow-credentials: true
# 可用于script标签上设置为 `crossorigin=use-credentials`的情形
https://some/api resCors://enable vase://sample_json
</code></pre></div></div>

<p>此设置虽然解决了跨域，但返回类型确不对：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>content-type: text/html; charset=utf8
</code></pre></div></div>

<p>所以，进一步地，这里需要自定义响应头，将返回类型修正为 JSON。</p>

<p>在 Values 面板创建变量 <code class="language-plaintext highlighter-rouge">CORSHeaders</code> 内容为：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Access-Control-Allow-Credentials: true
Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers,X-Requested-With,X-Custom-Headers
Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE
Access-Control-Allow-Origin: some_domain
Content-Type: application/json
</code></pre></div></div>

<p>其中需要注意 <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Headers</code>，启用 <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Credentials: true</code> 的情况下不能指定 <code class="language-plaintext highlighter-rouge">Access-Control-Allow-Headers:*</code>，因为此时 <code class="language-plaintext highlighter-rouge">*</code> 并不代表通配符的意思。只能将所有要允许的 header 列出来。</p>

<p>同时更新 Whistle 转发规则使用该变量：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://some/api resHeaders://{CORSHeaders} vase://sample_json
</code></pre></div></div>

<h2 id="相关资源">相关资源</h2>

<ul>
  <li><a href="https://github.com/nuysoft/Mock/wiki/Syntax-Specification">nuysoft/Mock Wiki</a></li>
  <li><a href="https://wproxy.org/whistle/rules/resCors.html">Whistle 文档 - resCors</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers">Access-Control-Allow-Headers</a></li>
</ul>

:ET
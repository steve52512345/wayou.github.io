I"2\<h1 id="currying-及应用">Currying 及应用</h1>

<p>Currying，中文多翻译为<strong>柯里化</strong>，感觉这个音译还没有达到类似 Humor 之于幽默的传神地步，后面直接使用 Currying。</p>

<h2 id="什么是-currying">什么是 Currying</h2>

<p>Currying 是这么一种<strong>机制</strong>，它将一个接收多个参数的函数，拆分成多个接收单个参数的函数。</p>

<p>考察下面的代码：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">// returns 7</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">add</code> 接收两个参数 <code class="language-plaintext highlighter-rouge">a</code>，<code class="language-plaintext highlighter-rouge">b</code>，并返回它们的和 <code class="language-plaintext highlighter-rouge">a+b</code>。</p>

<p>经过 curry 化处理后，函数成了如下形式：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>现在 <code class="language-plaintext highlighter-rouge">add</code> 接收一个参数 <code class="language-plaintext highlighter-rouge">a</code>，返回另一个接收一个参数 <code class="language-plaintext highlighter-rouge">b</code> 的函数。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">add</span><span class="p">(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">4</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">add3</span> <span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>

<span class="nx">add3</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</code></pre></div></div>

<p>现在当调用 <code class="language-plaintext highlighter-rouge">add(3)</code> 后，得到的不是和，而是另一个接收一个参数的函数，因此，<code class="language-plaintext highlighter-rouge">add</code> 的返回可以继续被调用，<code class="language-plaintext highlighter-rouge">add(3)(4)</code> 后面的这次调用才会将 4 加到 3 上得到和。</p>

<p>而 <code class="language-plaintext highlighter-rouge">var add3 = add(3)</code> 这样的单次调用，得到的函数效果相当于是将 3 保存在了新函数的闭包中，该函数会对传入的参数加 3。</p>

<p>注意这里提到了将入参 3 <strong>保存</strong> 到了闭包中后续使用，很容易联想到 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind"><code class="language-plaintext highlighter-rouge">Function.prototype.bind()</code></a>，它就可以对传入的函数提前绑定一些预设的入参：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">thisArg</span><span class="p">[,</span> <span class="nx">arg1</span><span class="p">[,</span> <span class="nx">arg2</span><span class="p">[,</span> <span class="p">...]]])</span>
</code></pre></div></div>

<p>后面会看到，正因为 <code class="language-plaintext highlighter-rouge">bind</code> 和 Currying 有点关系，在实现任意函数的 Currying 化时会用到它。</p>

<p>注意到 Currying 化的定义，其实是将多个参数打散到多个函数中，这个过程可通过代码来自动化，以达到将任意多入参函数进行 Currying 化的目的，后面讨论实现。</p>

<h2 id="偏函数partial-application">偏函数/Partial Application</h2>

<p>区别与 Currying，如果在拆分入参的过程中，这些拆分出来的函数不是一次只应用其中的一个，而是任意多个，则这些函数就是部分应用（Parital application）了原函数中的入参，称作偏函数。</p>

<p>考察下面的 <code class="language-plaintext highlighter-rouge">add</code> 函数，其实是将前面示例中的 <code class="language-plaintext highlighter-rouge">add</code> 入参进行了扩充，由两个增加到四个：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span> <span class="o">+</span> <span class="nx">d</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>那么如下的函数就都是偏函数，它们都部分应用了 <code class="language-plaintext highlighter-rouge">add</code> 的入参：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">partial1</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span> <span class="o">+</span> <span class="nx">d</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">partial2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span> <span class="o">+</span> <span class="nx">d</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">partial3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span> <span class="o">+</span> <span class="nx">d</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>偏函数中这种入参的拆分和部分应用，并不仅限于一层的拆分，可以是任意多次的:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">partial1</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="nx">partial2</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kd">function</span> <span class="nx">partial3</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span> <span class="o">+</span> <span class="nx">d</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="nx">partial1</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)(</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// 10</span>
</code></pre></div></div>

<p>其中，<code class="language-plaintext highlighter-rouge">partial1</code>、<code class="language-plaintext highlighter-rouge">partial2</code>、<code class="language-plaintext highlighter-rouge">partial3</code> 一起构成了原 <code class="language-plaintext highlighter-rouge">add</code> 函数的偏函数。</p>

<p>可以看到，偏函数是 Curring 更加一般（general）的形式，下面看如何实现将任意函数进行 Currying 化，或偏函数化。</p>

<h2 id="将一般化函数进行-currying-化">将一般化函数进行 Currying 化</h2>

<p>我们需要构造这么一个函数假设名叫 <code class="language-plaintext highlighter-rouge">curry</code>，</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">curry</span><span class="p">(</span><span class="nx">fn</span><span class="p">){</span>
  <span class="c1">// 待实现</span>
<span class="p">}</span>
</code></pre></div></div>

<p>调用 <code class="language-plaintext highlighter-rouge">curry</code> 后，我们可以得到原函数 Curry 化后的版本，</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">currified</span> <span class="o">=</span> <span class="nx">curry</span><span class="p">(</span><span class="nx">add</span><span class="p">);</span>
</code></pre></div></div>

<p>即上述 <code class="language-plaintext highlighter-rouge">currified</code> 应该等效为：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">currified</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>首先，通过 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length"><code class="language-plaintext highlighter-rouge">Function.length</code></a> 是可以知道一个给定函数其预期的入参个数的。</p>

<p>再加上前面提到的 <code class="language-plaintext highlighter-rouge">bind</code> 函数，可以得到如下的实现：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">curry</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span> <span class="nx">currify</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">args</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">args</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">length</span> <span class="p">?</span>
      <span class="nx">f</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">:</span>
      <span class="nx">currify</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>下面测试一下：</p>

<pre><code class="language-j">function add(a, b) {
  return a + b;
}

var currified = curry(add);

currified(1)(2); // 3
</code></pre>

<p>并且以上实现不只是简单的 Currying 化，可以是任意数量和任意次数的 parial application:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span> <span class="o">+</span> <span class="nx">d</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">currified</span> <span class="o">=</span> <span class="nx">curry</span><span class="p">(</span><span class="nx">add</span><span class="p">);</span>

<span class="nx">currified</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// 10</span>
<span class="nx">currified</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)(</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// 10</span>
<span class="nx">currified</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">// 10</span>
</code></pre></div></div>

<p>总之就是各种形状<ruby>和<rp>（</rp><rt>hàn</rt><rp>）</rp></ruby>姿势，各种颜色<ruby>和<rp>（</rp><rt>hàn</rt><rp>）</rp></ruby>皮肤的组合。</p>

<p>自动化的 CurryIng 倒是实现了，可说了半天，它具体有什么实用价值。</p>

<h2 id="函数的组合function-composition">函数的组合（function composition）</h2>

<p>我们知道代数里面可以有函数的组合，譬如：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>f(x) = x * x
g(y) = y + 1
g(f(x)) = x * x + 1

g(f(2)) = 2 * 2 + 1 = 5
</code></pre></div></div>

<p>上述代数表达转成 JavaScript 即：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">**</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">g</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span> <span class="c1">// 5</span>
</code></pre></div></div>

<p>这里用到了两个函数 <code class="language-plaintext highlighter-rouge">f</code>，<code class="language-plaintext highlighter-rouge">g</code> 联合起来得到一个结果，他们都分别只接收一个入参同时返回一个结果。</p>

<p>像这样只接收一个入参并返回一个结果的函数，便符合组装的需求，可像上面这样自由组合。通过上面的讨论我们知道，任意函数都可经过 Currying 化处理后变成多个只接收单个入参的函数。这就为函数的组合提供了基础。</p>

<p>因此我们可以将 <code class="language-plaintext highlighter-rouge">f</code>，<code class="language-plaintext highlighter-rouge">g</code> 的结合形成一个新的函数，这个函数作为对外的接口被调用即可。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">compose</span> <span class="o">=</span> <span class="nx">fn1</span> <span class="o">=&gt;</span> <span class="nx">fn2</span> <span class="o">=&gt;</span> <span class="nx">input</span> <span class="o">=&gt;</span> <span class="nx">fn1</span><span class="p">(</span><span class="nx">fn2</span><span class="p">(</span><span class="nx">input</span><span class="p">));</span>
</code></pre></div></div>

<p>使用：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myFn</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span><span class="nx">f</span><span class="p">)(</span><span class="nx">g</span><span class="p">);</span>
<span class="nx">myFn</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// 5</span>
</code></pre></div></div>

<p>像上面的 <code class="language-plaintext highlighter-rouge">compose</code> 还不够一般化，他只接收两个函数并对其进行结合，下面来看更加一般化的函数组合，将实现接收任意多个函数。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">pipe</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">fns</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">input</span> <span class="o">=&gt;</span> <span class="nx">fns</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">mem</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">mem</span><span class="p">),</span> <span class="nx">input</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">double</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="mi">2</span>
<span class="kd">const</span> <span class="nx">addOne</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span>
<span class="kd">const</span> <span class="nx">square</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span>

<span class="nx">pipe</span><span class="p">(</span><span class="nx">square</span><span class="p">,</span> <span class="nx">double</span><span class="p">,</span> <span class="nx">addOne</span><span class="p">)(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>上面的 <code class="language-plaintext highlighter-rouge">pipe</code> 将对输入依次应用 入参中的各函数，所以取名 <code class="language-plaintext highlighter-rouge">pipe</code> 管道流。</p>

<p>以上，函数的组装。</p>

<h2 id="相关资源">相关资源</h2>

<ul>
  <li><a href="https://stackoverflow.com/questions/36314/what-is-currying">What is ‘Currying’?</a></li>
  <li><a href="https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983">Curry and Function Composition</a></li>
  <li><a href="https://medium.com/@juliomatcom/an-elegant-and-simple-curry-f-implementation-in-javascript-cf36252cff4c">An elegant and simple curry(f) implementation in Javascript</a></li>
  <li><a href="https://lodash.com/docs/4.17.10#curry">lodash - curry</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length">Function.length</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Currying">Wikipedia  - Currying</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind">MDN - Function.prototype.bind()</a></li>
  <li><a href="https://2ality.com/2011/09/currying-vs-part-eval.html">Currying versus partial application (with JavaScript code)</a></li>
  <li><a href="https://2ality.com/2017/11/currying-in-js.html">Currying is not idiomatic in JavaScript</a></li>
  <li><a href="https://medium.com/dailyjs/functional-js-6-function-composition-b7042c2ccffa">Functional JS #6: Function composition</a></li>
  <li><a href="https://hackernoon.com/javascript-functional-composition-for-every-day-use-22421ef65a10">Functional JavaScript: Function Composition For Every Day Use</a></li>
</ul>

:ET
I":<h1 id="利用展开操作符简化对象上属性添加的操作">利用展开操作符简化对象上属性添加的操作</h1>

<p>经常情况下，需要根据条件动态向对象上添加属性，比如请求的参数。</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const params <span class="o">=</span> <span class="o">{</span>prop1:<span class="s1">'1'</span><span class="o">}</span>

<span class="k">if</span><span class="o">(</span>query<span class="o">){</span>
    params[<span class="s1">'prop2'</span><span class="o">]=</span> 2
<span class="o">}</span>
</code></pre></div></div>

<p>通过展开操作符 spread（<code class="language-plaintext highlighter-rouge">...</code>）可避免使用 if 从而简化操作。</p>

<p>考察如下的代码：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">prop1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
  <span class="nx">prop2</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">2</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">condition</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="nx">prop1</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="nx">prop2</span><span class="p">,</span> <span class="p">...(</span><span class="nx">condition</span> <span class="p">?</span> <span class="p">{</span> <span class="na">prop3</span><span class="p">:</span> <span class="dl">"</span><span class="s2">3</span><span class="dl">"</span> <span class="p">}</span> <span class="p">:</span> <span class="p">{})</span> <span class="p">});</span>
</code></pre></div></div>

<p>其中空对象 <code class="language-plaintext highlighter-rouge">{}</code> 处可使用 <code class="language-plaintext highlighter-rouge">null</code>，<code class="language-plaintext highlighter-rouge">undefined</code> 代替能够达到同样的效果。</p>

<p>借助逻辑运算符的短路特性可进一步简化：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">prop1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
  <span class="nx">prop2</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">2</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">condition</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span> <span class="na">a</span><span class="p">:</span> <span class="nx">prop1</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="nx">prop2</span><span class="p">,</span> <span class="p">...</span><span class="nx">condition</span> <span class="o">&amp;&amp;</span> <span class="p">{</span> <span class="na">prop3</span><span class="p">:</span> <span class="dl">"</span><span class="s2">3</span><span class="dl">"</span> <span class="p">}});</span>
</code></pre></div></div>

<p>只有 <code class="language-plaintext highlighter-rouge">condition</code> 为 <code class="language-plaintext highlighter-rouge">true</code> 时才会将后面的对象展示，否则表达式返回 false，而 false 展示是没效果的。</p>

<p>特别地，被展开的字段就是所需要的名字时，进一步简化成：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">prop1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
  <span class="nx">prop2</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">2</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">prop3</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">condition</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span> <span class="nx">prop1</span><span class="p">,</span><span class="nx">prop2</span><span class="p">,</span> <span class="p">...</span><span class="nx">condition</span> <span class="o">&amp;&amp;</span> <span class="p">{</span><span class="nx">prop3</span><span class="p">}});</span>
</code></pre></div></div>

:ET
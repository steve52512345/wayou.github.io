I"k<h1 id="nginx-配置清单">NGINX 配置清单</h1>

<p>以下内容来自 <a href="https://github.com/SimulatedGREG/nginx-cheatsheet">SimulatedGREG/nginx-cheatsheet</a>。</p>

<h2 id="通用设置">通用设置</h2>

<h3 id="端口-listen">端口 <code class="language-plaintext highlighter-rouge">listen</code></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
  # standard HTTP protocol
  listen 80;
  
  # standard HTTPS protocol
  listen 443 ssl;
  
  # listen on 80 using IPv6
  listen [::]:80;
  
  # listen only on IPv6
  listen [::]:80 ipv6only=on;
}
</code></pre></div></div>

<h3 id="域名-server_name">域名 <code class="language-plaintext highlighter-rouge">server_name</code></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
  # Listen to yourdomain.com
  server_name yourdomain.com;
  
  # Listen to multiple domains
  server_name yourdomain.com www.yourdomain.com;
  
  # Listen to all sub-domains
  server_name *.yourdomain.com;
  
  # Listen to all top-level domains
  server_name yourdomain.*;
  
  # Listen to unspecified hostnames (listens to IP address itself)
  server_name "";
}
</code></pre></div></div>

<h3 id="访问日志-access_log">访问日志 <code class="language-plaintext highlighter-rouge">access_log</code></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
  # Relative or full path to log file
  access_log /path/to/file.log;
  
  # Turn 'on' or 'off'
  access_log on;
}
</code></pre></div></div>

<h3 id="gzip-client_max_body_size"><code class="language-plaintext highlighter-rouge">gzip</code>, <code class="language-plaintext highlighter-rouge">client_max_body_size</code></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
  # Turn gzip compression 'on' or 'off'
  gzip on;
  
  # Limit client body size to 10mb
  client_max_body_size 10M;
}
</code></pre></div></div>

<h2 id="响应文件">响应文件</h2>

<h3 id="静态文件">静态文件</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
  listen 80;
  server_name yourdomain.com;
  
  location / {
  	root /path/to/website;
  }
}
</code></pre></div></div>

<h3 id="支持前端路由">支持前端路由</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
  listen 80;
  server_name yourdomain.com;
  root /path/to/website;
  
  location / {
  	try_files $uri $uri/ /index.html;
  }
}
</code></pre></div></div>

<h2 id="重定向">重定向</h2>

<h3 id="301-永久重定向"><code class="language-plaintext highlighter-rouge">301</code> 永久重定向</h3>

<p>用于比如 <code class="language-plaintext highlighter-rouge">www.yourdomain.com</code> 重定向到 <code class="language-plaintext highlighter-rouge">yourdomain.com</code> 或 将 <code class="language-plaintext highlighter-rouge">http</code> 重定向到 <code class="language-plaintext highlighter-rouge">https</code>。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
  listen 80;
  server_name www.yourdomain.com;
  return 301 http://yourdomain.com$request_uri;
}
</code></pre></div></div>

<h3 id="302-临时重定向"><code class="language-plaintext highlighter-rouge">302</code> 临时重定向</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
  listen 80;
  server_name yourdomain.com;
  return 302 http://otherdomain.com;
}
</code></pre></div></div>

<h3 id="重定向指定页面">重定向指定页面</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
  listen 80;
  server_name yourdomain.com;
  
  location /redirect-url {
	return 301 http://otherdomain.com;  
  }
}
</code></pre></div></div>

<h2 id="反向代理">反向代理</h2>

<h3 id="基本">基本</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
  listen 80;
  server_name yourdomain.com;
  
  location / {
    proxy_pass http://0.0.0.0:3000;
    # where 0.0.0.0:3000 is your Node.js Server bound on 0.0.0.0 listing on port 3000
  }
}
</code></pre></div></div>

<h3 id="进阶">进阶</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>upstream node_js {
  server 0.0.0.0:3000;
  # where 0.0.0.0:3000 is your Node.js Server bound on 0.0.0.0 listing on port 3000
}

server {
  listen 80;
  server_name yourdomain.com;
  
  location / {
    proxy_pass http://node_js;
  }
}
</code></pre></div></div>

<h3 id="socket-相关">socket 相关</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>upstream node_js {
  server 0.0.0.0:3000;
}

server {
  listen 80;
  server_name yourdomain.com;
  
  location / {
    proxy_pass http://node_js;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
	
    # not required but useful for applications with heavy WebSocket usage
    # as it increases the default timeout configuration of 60
    proxy_read_timeout 80;
  }
}
</code></pre></div></div>

<h2 id="tlsssl-https">TLS/SSL (HTTPS)</h2>

<p>以下仅是简单 HTTPS 示例，并不是可用于生产环境的最优配置。</p>

<p>相关资源：</p>

<ul>
  <li><a href="https://letsencrypt.org/">免费证书</a></li>
  <li><a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04">Ubuntu 上配置 TLS/SSL 的教程</a></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
  listen 443 ssl;
  server_name yourdomain.com;
  
  ssl on;
  
  ssl_certificate /path/to/cert.pem;
  ssl_certificate_key /path/to/privkey.pem;
  
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_trusted_certificate /path/to/fullchain.pem;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  add_header Strict-Transport-Security max-age=15768000;
}

# Permanent redirect for HTTP to HTTPS
server {
  listen 80;
  server_name yourdomain.com;
  return 301 https://$host$request_uri;
}
</code></pre></div></div>

<h2 id="大型应用">大型应用</h2>

<h3 id="负载均衡">负载均衡</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>upstream node_js {
  server 0.0.0.0:3000;
  server 0.0.0.0:4000;
  server 123.131.121.122;
}

server {
  listen 80;
  server_name yourdomain.com;
  
  location / {
    proxy_pass http://node_js;
  }
}
</code></pre></div></div>

:ET
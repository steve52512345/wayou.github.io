I"N]<h1 id="react--typescript-默认-props-的处理">React + TypeScript 默认 Props 的处理</h1>

<h2 id="react-中的默认-props">React 中的默认 Props</h2>

<p>通过组件的 <code class="language-plaintext highlighter-rouge">defaultProps</code> 属性可为其 <code class="language-plaintext highlighter-rouge">Props</code> 指定默认值。</p>

<p>以下示例来自 <a href="https://reactjs.org/docs/typechecking-with-proptypes.html#default-prop-values">React 官方文档 - Default Prop Values</a>：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Greeting</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Specifies the default values for props:</span>
<span class="nx">Greeting</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Stranger</span><span class="dl">'</span>
<span class="p">};</span>

<span class="c1">// Renders "Hello, Stranger":</span>
<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">Greeting</span> <span class="o">/&gt;</span><span class="p">,</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">example</span><span class="dl">'</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>如果编译过程使用了 Babel 的 <a href="https://babeljs.io/docs/plugins/transform-class-properties/">transform-class-properties</a> 插件，还可以这么写：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Greeting</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">stranger</span><span class="dl">'</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="加入-typescript">加入 TypeScript</h2>

<p>加入 TypeScript 后</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Props</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Greeting</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="o">&lt;</span><span class="nx">Props</span><span class="p">,</span> <span class="p">{}</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">static</span> <span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">stranger</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">};</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>Hello, <span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>此时不支持直接通过类访问 <code class="language-plaintext highlighter-rouge">defaultProps</code> 来赋值以设置默认属性，因为 <code class="language-plaintext highlighter-rouge">React.Component</code> 类型上并没有该属性。</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 🚨Property 'defualtProps' does not exist on type 'typeof Greeting'.ts(2339)</span>
<span class="nx">Greeting</span><span class="p">.</span><span class="nx">defualtProps</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">stranger</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="默认属性的类型">默认属性的类型</h3>

<p>上面虽然实现了通过 <code class="language-plaintext highlighter-rouge">defaultProps</code> 来指定属性的默认值，但 <code class="language-plaintext highlighter-rouge">defaultProps</code> 的类型是不受约束的，和 <code class="language-plaintext highlighter-rouge">Props</code> 没有关联上。以至于我们可以在 <code class="language-plaintext highlighter-rouge">defaultProps</code> 里面放任何值，显然这是不科学的。</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">class Greeting extends React.Component&lt;Props, {}&gt; {
</span>  static defaultProps = {
    name: "stranger",
    // 并不会报错
<span class="gi">+    foo: 1,
+    bar: {},
</span>  };
 // ...
<span class="err">}</span>
</code></pre></div></div>

<p>同时对于同一字段，我们不得不书写两次代码。一次是定义组件的 <code class="language-plaintext highlighter-rouge">Props</code>，另一次是在 <code class="language-plaintext highlighter-rouge">defaultProps</code> 里。如果属性有增删或名称有变更，两个地方都需要改。</p>

<p>为了后面演示方便，现在给组件新增一个必填属性 <code class="language-plaintext highlighter-rouge">age:number</code>。</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Props</span> <span class="p">{</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">name</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Greeting</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="o">&lt;</span><span class="nx">Props</span><span class="p">,</span> <span class="p">{}</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">static</span> <span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">stranger</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">};</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
        <span class="nx">Hello</span><span class="p">,</span> <span class="p">{</span><span class="nx">name</span><span class="p">},</span> <span class="nx">my</span> <span class="nx">age</span> <span class="k">is</span> <span class="p">{</span><span class="nx">age</span><span class="p">}</span>
      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>通过可选属性抽取出来，利用 <code class="language-plaintext highlighter-rouge">typeof</code> 获取其类型和必传属性结合来形成组件的 <code class="language-plaintext highlighter-rouge">Props</code> 可解决上面提到的两个问题。</p>

<p>所以优化后的代码成了：</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">stranger</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>

<span class="kd">type</span> <span class="nx">Props</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span> <span class="o">&amp;</span> <span class="nb">Partial</span><span class="o">&lt;</span><span class="k">typeof</span> <span class="nx">defaultProps</span><span class="o">&gt;</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Greeting</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="o">&lt;</span><span class="nx">Props</span><span class="p">,</span> <span class="p">{}</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">static</span> <span class="nx">defaultProps</span> <span class="o">=</span> <span class="nx">defaultProps</span><span class="p">;</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        Hello, <span class="si">{</span><span class="nx">name</span><span class="si">}</span>, my age is <span class="si">{</span><span class="nx">age</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>注意我们的 <code class="language-plaintext highlighter-rouge">Props</code> 是通过和 <code class="language-plaintext highlighter-rouge">typeof defaultProps</code> 组合而形成的，可选属性中的 <code class="language-plaintext highlighter-rouge">name</code> 字段在整个代码中只书写了一次。</p>

<p>当我们更新了 <code class="language-plaintext highlighter-rouge">defaultProps</code> 时整个组件的 <code class="language-plaintext highlighter-rouge">Props</code> 也同步更新，所以 <code class="language-plaintext highlighter-rouge">defaultProps</code> 中的字段一定是组件所需要的字段。</p>

<h2 id="默认值的判空检查优化">默认值的判空检查优化</h2>

<p>讲道理，如果属性提供了默认值，在使用时，可不再需要判空，因为其一定是有值的。但 TypeScript 在编译时并不知道，因为有默认值的属性是被定义成可选的 <code class="language-plaintext highlighter-rouge">?</code>。</p>

<p>比如我们尝试访问 <code class="language-plaintext highlighter-rouge">name</code> 属性的长度，</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Greeting</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="o">&lt;</span><span class="nx">Props</span><span class="p">,</span> <span class="p">{}</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">static</span> <span class="nx">defaultProps</span> <span class="o">=</span> <span class="nx">defaultProps</span><span class="p">;</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="cm">/* 🚨Object is possibly 'undefined'.ts(2532) */</span><span class="si">}</span>
        name length is <span class="si">{</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>因为此时我们的 <code class="language-plaintext highlighter-rouge">Props</code> 实际上是：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Props</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span> <span class="o">&amp;</span> <span class="nb">Partial</span><span class="o">&lt;</span><span class="k">typeof</span> <span class="nx">defaultProps</span><span class="o">&gt;</span><span class="p">;</span>
<span class="c1">// 相当于：</span>
<span class="kd">type</span> <span class="nx">Props</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">name</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>修正方法有多个，最简单的是使用<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator">非空判定符/Non-null assertion operator</a>。</p>

<h3 id="非空判定符">非空判定符</h3>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- name length is {name.length}
</span><span class="gi">+ name length is {name!.length}
</span></code></pre></div></div>

<p>这意味着每一处使用的地方都需要做类似的操作，当程序复杂起来时不太可控。但多数情况下应付日常使用，这样已经够了。</p>

<h3 id="类型转换">类型转换</h3>

<p>因为组件内部有默认值的保证，所以字段不可能为空，因此，可对组件内部使用非空的属性类型来定义组件，而对外仍暴露原来的版本。</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">const Greeting = class extends React.Component&lt;
</span><span class="gd">-  Props,
</span><span class="gi">+  Props &amp; typeof defaultProps,
</span>  {}
<span class="gi">&gt; {
</span>  static defaultProps = defaultProps;

  render() {
    const { name } = this.props;
    return (
      &lt;div&gt;
<span class="gd">-        name length is {name!.length}
</span><span class="gi">+        name length is {name.length}
</span>      &lt;/div&gt;
    );
  }
<span class="gd">-};
</span><span class="gi">+} as React.ComponentClass&lt;Props&gt;;
</span></code></pre></div></div>

<p>通过 <code class="language-plaintext highlighter-rouge">as React.ComponentClass&lt;Props&gt;</code> 的类型转换，对外使用 <code class="language-plaintext highlighter-rouge">Greeting</code> 时属性中 <code class="language-plaintext highlighter-rouge">name</code> 还是可选的，但组件内部实际使用的是 <code class="language-plaintext highlighter-rouge">Props &amp; typeof defaultProps</code>，而不是 <code class="language-plaintext highlighter-rouge">Partial&lt;T&gt;</code> 版本的，所以规避了字段可能为空的报错。</p>

<h3 id="通过高阶组件的方式封装默认属性的处理">通过高阶组件的方式封装默认属性的处理</h3>

<p>通过定义一个高阶组件比如 <code class="language-plaintext highlighter-rouge">withDefaultProps</code> 将需要默认属性的组件包裹，将默认值的处理放到高阶组件中，同样可解决上述问题。</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">withDefaultProps</span><span class="o">&lt;</span><span class="nx">P</span> <span class="kd">extends</span> <span class="nx">object</span><span class="p">,</span> <span class="nx">DP</span> <span class="kd">extends</span> <span class="nb">Partial</span><span class="o">&lt;</span><span class="nx">P</span><span class="o">&gt;&gt;</span><span class="p">(</span>
  <span class="nx">dp</span><span class="p">:</span> <span class="nx">DP</span><span class="p">,</span>
  <span class="nx">component</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ComponentType</span><span class="o">&lt;</span><span class="nx">P</span><span class="o">&gt;</span><span class="p">,</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="nx">component</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="nx">dp</span><span class="p">;</span>
  <span class="kd">type</span> <span class="nx">RequiredProps</span> <span class="o">=</span> <span class="nx">Omit</span><span class="o">&lt;</span><span class="nx">P</span><span class="p">,</span> <span class="kr">keyof</span> <span class="nx">DP</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">(</span><span class="nx">component</span> <span class="k">as</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ComponentType</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">as</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ComponentType</span><span class="o">&lt;</span>
    <span class="nx">RequiredProps</span> <span class="o">&amp;</span> <span class="nx">DP</span>
  <span class="o">&gt;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>然后我们的组件则可以这样来写：</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">stranger</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>

<span class="kr">interface</span> <span class="nx">Props</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">_Greeting</span> <span class="o">=</span> <span class="kd">class</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="o">&lt;</span><span class="nx">Props</span><span class="p">,</span> <span class="p">{}</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">public</span> <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
    <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>name length is <span class="si">{</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">Greeting</span> <span class="o">=</span> <span class="nx">withDefaultProps</span><span class="p">(</span><span class="nx">defaultProps</span><span class="p">,</span> <span class="nx">_Greeting</span><span class="p">);</span>
</code></pre></div></div>

<p>这种方式就比较通用一些，将 <code class="language-plaintext highlighter-rouge">withDefaultProps</code> 抽取成一个公共组件，后续其他组件都可使用。但此种情况下就没有很好地利用已经定义好的默认值 <code class="language-plaintext highlighter-rouge">defaultProps</code> 中的字段，书写 <code class="language-plaintext highlighter-rouge">Props</code> 时还需要重复写一遍字段名。</p>

<h2 id="相关资源">相关资源</h2>

<ul>
  <li><a href="https://reactjs.org/docs/typechecking-with-proptypes.html#default-prop-values">React docs - Default Prop Values</a></li>
  <li><a href="https://stackoverflow.com/questions/37282159/default-property-value-in-react-component-using-typescript/37282264#37282264">Default property value in React component using TypeScript</a></li>
  <li><a href="https://medium.com/@martin_hotell/react-typescript-and-defaultprops-dilemma-ca7f81c661c7">React, TypeScript and defaultProps dilemma</a></li>
</ul>

:ET
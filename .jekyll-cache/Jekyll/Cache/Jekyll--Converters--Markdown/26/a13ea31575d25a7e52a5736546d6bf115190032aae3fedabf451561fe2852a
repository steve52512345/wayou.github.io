I"kE<h1 id="rabbitmq-nodejs-示例">RabbitMQ Node.js 示例</h1>

<p>RabbitQM 处理和管理消息队列的中间人（broker）。可简单理解为邮局，你在程序中写好消息，指定好收件人，剩下的事件就是 RabbitMQ 的工作了，它会保证收件人正确收到邮件。</p>

<p>任何发送邮件的程序都是 <code class="language-plaintext highlighter-rouge">Producer</code>，消息队列可理解为邮筒，新件将堆积在此处。所有待处理的消息都以队列形式存储，总体上看来就是一个巨大的消息 buffer，至于存储量与设置的内存及硬件有关。任何应用都可以向队列添加消息，也可以多个消费者都在从队列中获取消息。</p>

<p>而 <code class="language-plaintext highlighter-rouge">consumer</code> 即是消息队列中消息的应用，其处于等待接收来自 RabbitMQ 发送来的消息。</p>

<p>消息生产者，消费者及 RabbitMQ 这个中间人三者不必同时存在于同一机器上，实际运用时也确实大部分不会部署在同一机器上，比如有专门的机器作为 RabbitMQ 实体，而应用程序会部署在其他的集群。应用程序可以是同时负责生产消息的，也同时是消费者。</p>

<p align="center"><img alt="来自官方文档中关于 RabbitMQ 消息列队的示意图" src="https://www.rabbitmq.com/img/tutorials/python-one.png" /></p>
<p align="center">来自官方文档中关于 RabbitMQ 消息列队的示意图</p>

<h2 id="安装">安装</h2>

<p>通过<a href="https://www.rabbitmq.com/download.html">官网提供的地址</a>下载相应平台的程序进行安装，Mac 可通过 <a href="https://www.rabbitmq.com/install-homebrew.html">Homebrew 进行安装</a>：</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>brew update <span class="o">&amp;&amp;</span> brew <span class="nb">install </span>rabbitmq
</code></pre></div></div>

<h2 id="启动">启动</h2>

<p>如果使用 Homebrew 安装，可通过 <code class="language-plaintext highlighter-rouge">brew services start rabbitmq</code> 命令来启动 RabbitMQ 服务。</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>brew services start rabbitmq
<span class="o">==&gt;</span> Successfully started <span class="sb">`</span>rabbitmq<span class="sb">`</span> <span class="o">(</span>label: homebrew.mxcl.rabbitmq<span class="o">)</span>
</code></pre></div></div>

<p>或直接运行 <code class="language-plaintext highlighter-rouge">/usr/local/sbin/rabbitmq-server</code>。</p>

<p>启动后，会有一个可视化的管理后台，可通过 <a href="http://localhost:15672/">http://localhost:15672/</a> 访问，用户名密码皆为 <code class="language-plaintext highlighter-rouge">guest</code>。</p>

<h2 id="基于-nodejs-的-hello-world-示例">基于 Node.js 的 Hello World 示例</h2>

<p>通过 <a href="https://github.com/squaremo/amqp.node">amqp.node</a> 展示 RabbitMQ 在 Node.js 中应用的一个示例。</p>

<p>RabbmitMQ 支持多种协议进行通信，amqp.node 使用的是 AMQP 0-9-1 这一开源协议，后者专门为处理消息而设计。作为客户端消费消息，使用的是 <a href="http://www.squaremobius.net/amqp.node/">amqp.node client</a> 模块，但 RabbitMQ 本身是支持多种<a href="http://rabbitmq.com/devtools.html">客户端</a>的。</p>

<p>初始化一个 Node,js 项目然后通过以下命令安装 amqp.node 模块：</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>rabbitmq-demo <span class="o">&amp;&amp;</span> yarn init <span class="nt">-y</span>
<span class="nv">$ </span>yarn add amqplib
</code></pre></div></div>

<h3 id="发送消息">发送消息</h3>

<p>创建 <code class="language-plaintext highlighter-rouge">send.js</code> 文件，在其中编写发送消息的逻辑，它将连接到 RabbitMQ 发送消息然后退出。</p>

<p>首先建立到 RabbitMQ 服务的连接，</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="kd">var</span> <span class="nx">amqp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">amqplib/callback_api</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">amqp</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="dl">'</span><span class="s1">amqp://localhost</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error0</span><span class="p">,</span> <span class="nx">connection</span><span class="p">)</span> <span class="p">{});</span>
</code></pre></div></div>

<p>连接建立成功后，创建一个通道（channel），具体的发送将会在这个通道中进行。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">amqp</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="dl">'</span><span class="s1">amqp://localhost</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error0</span><span class="p">,</span> <span class="nx">connection</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">error0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nx">error0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">connection</span><span class="p">.</span><span class="nx">createChannel</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error1</span><span class="p">,</span> <span class="nx">channel</span><span class="p">)</span> <span class="p">{});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>发送消息前，需要先声明一个队列，然后将消息发送到该队列：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">amqp</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="dl">'</span><span class="s1">amqp://localhost</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error0</span><span class="p">,</span> <span class="nx">connection</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">error0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nx">error0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">connection</span><span class="p">.</span><span class="nx">createChannel</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error1</span><span class="p">,</span> <span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error1</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="nx">error1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">queue</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello world</span><span class="dl">'</span><span class="p">;</span>

    <span class="nx">channel</span><span class="p">.</span><span class="nx">assertQueue</span><span class="p">(</span><span class="nx">queue</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">durable</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">});</span>

    <span class="nx">channel</span><span class="p">.</span><span class="nx">sendToQueue</span><span class="p">(</span><span class="nx">queue</span><span class="p">,</span> <span class="nx">Buffer</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">msg</span><span class="p">));</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2"> [x] Sent %s</span><span class="dl">"</span><span class="p">,</span> <span class="nx">msg</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>队列的创建是一个<a href="https://stackoverflow.com/questions/1077412/what-is-an-idempotent-operation">幂等操作</a>，只该队列不存在的情况才会新建。</p>

<p>最后关闭连接并退出。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">connection</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
</code></pre></div></div>

<details>
<summary>
完整的 send.js
</summary>

```js
#!/usr/bin/env node

var amqp = require('amqplib/callback_api');

amqp.connect('amqp://localhost', function(error0, connection) {
    if (error0) {
        throw error0;
    }
    connection.createChannel(function(error1, channel) {
        if (error1) {
            throw error1;
        }

        var queue = 'hello';
        var msg = 'Hello World!';

        channel.assertQueue(queue, {
            durable: false
        });
        channel.sendToQueue(queue, Buffer.from(msg));

        console.log(" [x] Sent %s", msg);
    });
    setTimeout(function() {
        connection.close();
        process.exit(0);
    }, 500);
});
```

</details>

<h3 id="接收消息">接收消息</h3>

<p>下面开始编写消费者，消费者做的事情是监听来自 RabbitMQ 的消息并处理。</p>

<p>创建 <code class="language-plaintext highlighter-rouge">receive.js</code>，引入 amqp.node 模块，流程和发送者一样，也是先创建连接，然后创建通道，在通道中声明需要监听的队列：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="kd">var</span> <span class="nx">amqp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">amqplib/callback_api</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">amqp</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="dl">'</span><span class="s1">amqp://localhost</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error0</span><span class="p">,</span> <span class="nx">connection</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">error0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nx">error0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">connection</span><span class="p">.</span><span class="nx">createChannel</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error1</span><span class="p">,</span> <span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error1</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="nx">error1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">queue</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">;</span>

    <span class="nx">channel</span><span class="p">.</span><span class="nx">assertQueue</span><span class="p">(</span><span class="nx">queue</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">durable</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>这里的队列声明不会与发送者那边的冲突，因为上面提到过，队列只在不存在的情况下才会重新生成。这里再次声明可以保证监听前队列已经存在。并且实际场景下，消费者有可能是在发送者之前启动的。</p>

<p>然后添加监听的逻辑：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2"> [*] Waiting for messages in %s. To exit press CTRL+C</span><span class="dl">"</span><span class="p">,</span> <span class="nx">queue</span><span class="p">);</span>

<span class="nx">channel</span><span class="p">.</span><span class="nx">consume</span><span class="p">(</span><span class="nx">queue</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2"> [x] Received %s</span><span class="dl">"</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
<span class="p">},</span> <span class="p">{</span>
    <span class="na">noAck</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">});</span>
</code></pre></div></div>

<details>
<summary>
完整的 receive.js
</summary>

```js

#!/usr/bin/env node

var amqp = require('amqplib/callback_api');

amqp.connect('amqp://localhost', function(error0, connection) {
    if (error0) {
        throw error0;
    }
    connection.createChannel(function(error1, channel) {
        if (error1) {
            throw error1;
        }

        var queue = 'hello';

        channel.assertQueue(queue, {
            durable: false
        });

        console.log(" [*] Waiting for messages in %s. To exit press CTRL+C", queue);

        channel.consume(queue, function(msg) {
            console.log(" [x] Received %s", msg.content.toString());
        }, {
            noAck: true
        });
    });
});
```

</details>

<h3 id="运行">运行</h3>

<p>分别在命令行启动上面两个程序，查看打印的信息。</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>node send.js
 <span class="o">[</span>x] Sent Hello World!

<span class="nv">$ </span>node receive.js
 <span class="o">[</span><span class="k">*</span><span class="o">]</span> Waiting <span class="k">for </span>messages <span class="k">in </span>hello. To <span class="nb">exit </span>press CTRL+C
 <span class="o">[</span>x] Received Hello World!
</code></pre></div></div>

<p>另外，可通过 <code class="language-plaintext highlighter-rouge">sudo rabbitmqctl list_queues</code> 手动查看 RabbitMQ 中的消息。</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>/usr/local/sbin/rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues <span class="k">for </span>vhost / ...
name	messages
hello	0
</code></pre></div></div>

<p>如果发现 <code class="language-plaintext highlighter-rouge">rabbitmqctl</code> 命令不可用，需要添加 <code class="language-plaintext highlighter-rouge">/usr/local/sbin</code> 到环境变量中，</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/usr/local/sbin:<span class="nv">$PATH</span>
</code></pre></div></div>

<p>其中 fish shell 通过添加如下命令到 fish 的配置文件即可：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span> <span class="nt">-gx</span> PATH /usr/local/sbin <span class="nv">$PATH</span>
</code></pre></div></div>

<h2 id="相关资源">相关资源</h2>

<ul>
  <li><a href="https://www.rabbitmq.com/tutorials/tutorial-one-javascript.html">RabbitMQ Introduction</a></li>
  <li><a href="https://github.com/rabbitmq/rabbitmq-tutorials/tree/master/javascript-nodejs">Node.js code for RabbitMQ tutorials</a></li>
  <li><a href="https://github.com/squaremo/amqp.node">squaremo/amqp.node</a></li>
</ul>

:ET
I"*<h1 id="typescript-参数属性">TypeScript 参数属性</h1>

<p>假设类中创建的 <code class="language-plaintext highlighter-rouge">readonly</code> 类型的属性，该类型的属性只能在声明处或构造器中进行初始化。</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Octopus</span> <span class="p">{</span>
    <span class="k">readonly</span> <span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="k">readonly</span> <span class="nx">numberOfLegs</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="kd">constructor</span> <span class="p">(</span><span class="nx">theName</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">theName</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>为了初始化 <code class="language-plaintext highlighter-rouge">name</code> 属性，不得不在构造器中声明另一个入参 <code class="language-plaintext highlighter-rouge">theName</code>。这显得冗余。</p>

<p>TypeScript 提供了在构造器上同时完成属性的声明和初始化的功能。</p>

<p>以下代码和上面的等效：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Octopus</span> <span class="p">{</span>
    <span class="k">readonly</span> <span class="nx">numberOfLegs</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="k">readonly</span> <span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这种通过在构造器的入参中声明属性的方式叫作 <a href="https://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties">Parameter properties</a>。</p>

<p><strong>通过在构造器入参上添加访问限定符（accessibility modifier ），<code class="language-plaintext highlighter-rouge">readonly</code> 或两者结合，该参入便会成为类的属性。</strong></p>

<p>一个比较综合的示例：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Foo</span> <span class="p">{</span>
  <span class="nl">a</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">public</span> <span class="nx">b</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="k">protected</span> <span class="nx">c</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">d</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="k">public</span> <span class="nx">e</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="dl">"</span><span class="s2">2</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// ✅ `a` 没有修饰词，和 C++ struct 默认公有表现一样为 `public`，与 C++ class 默认私有刚好相反</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span> <span class="c1">// ✅ `b` 是公有</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">.</span><span class="nx">c</span><span class="p">);</span> <span class="c1">// 🚨 `a` `protected` 只能自己和继承类中访问</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">.</span><span class="nx">d</span><span class="p">);</span> <span class="c1">// 🚨 `d` 没有修饰词，不是入参属性，类上面没有该属性</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">.</span><span class="nx">e</span><span class="p">);</span> <span class="c1">// ✅ `a` 通过构造器创建的 `public` 属性</span>
</code></pre></div></div>

<h2 id="相关资源">相关资源</h2>

<ul>
  <li><a href="https://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties">TypeScript - Parameter properties</a></li>
</ul>
:ET
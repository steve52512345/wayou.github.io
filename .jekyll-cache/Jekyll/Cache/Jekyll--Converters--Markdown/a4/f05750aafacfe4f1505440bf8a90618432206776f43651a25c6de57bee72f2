I"(<h1 id="koa-router-路由参数与前端路由的结合">koa-router 路由参数与前端路由的结合</h1>

<p><a href="">koa-router</a> 定制路由时支持通过冒号形式在 url 中指定参数，该参数会挂载到 <code class="language-plaintext highlighter-rouge">context</code> 上然后可通过 <code class="language-plaintext highlighter-rouge">context.params.paramName</code> 方便地获取。</p>

<p>考察下面的示例：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">Koa</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">koa</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">koa-router</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Koa</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/user/:id</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">userId</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="s2">`user id is:</span><span class="p">${</span><span class="nx">userId</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">()).</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">allowedMethods</span><span class="p">());</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">server started at http:localhost:3000</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>启动服务后可看到页面中展示出了从 url 中获取到的 id 参数。</p>

<p><img src="https://user-images.githubusercontent.com/3783096/57971816-a2e5d400-79c5-11e9-8e74-16a0bccc1560.png" alt="路由参数的获取展示" /></p>
<p align="center">路由参数的获取展示</p>

<p>现在来考虑另一种情况，即路由中支持前端路由的情况。</p>

<p>即把现在的 url 由 <code class="language-plaintext highlighter-rouge">/user/:id</code> 的形式扩展成 <code class="language-plaintext highlighter-rouge">/user/:id/foo/bar</code>，这里 <code class="language-plaintext highlighter-rouge">/foo/bar</code> 部分可以是任何路由，作为前端处理的路由部分。</p>

<p>为了实现这样的前端路由部分，服务端路由的配置需要借助正则来进行，</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- router.get("/user/:id", async function(ctx, next) {
</span><span class="gi">+ router.get(["/user/:id", /\/user\/([\w|\d]+)\/.*/], async function(ctx, next) {
</span>  const userId = ctx.params.id;
  ctx.body = `user id is:${userId}`;
<span class="err">});</span>
</code></pre></div></div>

<p>这里将路由中 url 由单个字符串变成了数组形式，第一个还是原来的路由，这样正常的通过 <code class="language-plaintext highlighter-rouge">/user/1</code> 形式过来的页面能命中该路由。同时添加 <code class="language-plaintext highlighter-rouge">/\/user\/([\w|\d]+)\/.*/</code> 部分，因为正则情况下不再支持路由中通过冒号进行参数的配置，所以这里 <code class="language-plaintext highlighter-rouge">/user/</code> 后跟随的 id 也需要使用正则来替换掉。</p>

<p>但正则匹配下的路由就不能通过 <code class="language-plaintext highlighter-rouge">context.params</code> 来访问 url 上的参数了。不过好在可通过在正则中定义匹配组（Capturing Groups）的形式来定义参数，即其中 <code class="language-plaintext highlighter-rouge">([\w|\d]+)</code> 括号包裹的部分，称为一个匹配组，一个匹配组是会自动被挂载到 <code class="language-plaintext highlighter-rouge">context.params</code> 上的，只是不像通过冒号定义的参数那样会有一个名字，这种形式的参数按照匹配到的顺序形成一个数组赋值到 <code class="language-plaintext highlighter-rouge">context.params</code>，所以访问第一个匹配组形成的参数可通过 <code class="language-plaintext highlighter-rouge">context.params[0]</code> 来获取。</p>

<p>于是上面的代码稍加修正后，就能够正确处理来自命名参数（通过冒号匹配）或正则参数形成的 query 参数了。</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- router.get("/user/:id", async function(ctx, next) {
</span><span class="gi">+ router.get(["/user/:id", /\/user\/([\w|\d]+)\/.*/], async function(ctx, next) {
</span><span class="gd">-  const userId = ctx.params.id;
</span><span class="gi">+  const userId = ctx.params.id || ctx.params[0];
</span>  ctx.body = `user id is:${userId}`;
<span class="err">});</span>
</code></pre></div></div>

<p>最后完整的代码会是这样：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">Koa</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">koa</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">koa-router</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Koa</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">([</span><span class="dl">"</span><span class="s2">/user/:id</span><span class="dl">"</span><span class="p">,</span> <span class="sr">/</span><span class="se">\/</span><span class="sr">user</span><span class="se">\/([\w</span><span class="sr">|</span><span class="se">\d]</span><span class="sr">+</span><span class="se">)\/</span><span class="sr">.*/</span><span class="p">],</span> <span class="k">async</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">userId</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="o">||</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="s2">`user id is:</span><span class="p">${</span><span class="nx">userId</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">()).</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">allowedMethods</span><span class="p">());</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">server started at http:localhost:3000</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>此时访问以下连接进行测试，</p>

<ul>
  <li><a href="http://localhost:3000/user/1">http://localhost:3000/user/1</a></li>
  <li><a href="http://localhost:3000/user/2/foo">http://localhost:3000/user/2/foo</a></li>
  <li><a href="http://localhost:3000/user/3/foo/bar">http://localhost:3000/user/3/foo/bar</a></li>
</ul>

<p>均能正确命中页面并成功获取到路由中的参数。</p>

<p><img src="https://user-images.githubusercontent.com/3783096/57971813-9bbec600-79c5-11e9-9958-70a3a3065d66.gif" alt="正则路由及路由参数的获取" /></p>
<p align="center">正则路由及路由参数的获取</p>
:ET
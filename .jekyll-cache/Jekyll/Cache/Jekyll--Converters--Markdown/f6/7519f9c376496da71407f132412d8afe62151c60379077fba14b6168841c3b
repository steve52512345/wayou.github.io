I"o<h1 id="c-float-vs-double">C++ <code class="language-plaintext highlighter-rouge">float</code> vs <code class="language-plaintext highlighter-rouge">double</code></h1>

<h2 id="精度">精度</h2>

<p>相比 <code class="language-plaintext highlighter-rouge">float</code> ，<code class="language-plaintext highlighter-rouge">double</code> 从其名字上已经展示出，它的精度是前者的两倍，他们的精度分别为：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">float</code>: 7 位数字</li>
  <li><code class="language-plaintext highlighter-rouge">double</code>: 15 位数字</li>
</ul>

<p>可通过如下的示例看出，在重复进行计算时，精度差异开始显现：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">float</span> <span class="n">a</span> <span class="o">=</span> <span class="mf">1.</span><span class="n">f</span> <span class="o">/</span> <span class="mi">81</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">729</span><span class="p">;</span> <span class="o">++</span> <span class="n">i</span><span class="p">)</span>
    <span class="n">b</span> <span class="o">+=</span> <span class="n">a</span><span class="p">;</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"%.7g</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span> <span class="c1">// prints 9.000023</span>
</code></pre></div></div>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">a</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="mi">81</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">729</span><span class="p">;</span> <span class="o">++</span> <span class="n">i</span><span class="p">)</span>
    <span class="n">b</span> <span class="o">+=</span> <span class="n">a</span><span class="p">;</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"%.15g</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span> <span class="c1">// prints 8.99999999999996</span>
</code></pre></div></div>

<p>尽管如此，<code class="language-plaintext highlighter-rouge">double</code> 也不是十分精确，所以还有 <code class="language-plaintext highlighter-rouge">long double</code> 类型，该类型下上面的结果为 <code class="language-plaintext highlighter-rouge">9.000000000000000066</code>。所有浮点型都面临精度丢失的问题，所以处理高精度的场景，比如涉及金钱，最好用 <code class="language-plaintext highlighter-rouge">int</code> 或单独的分数类（fraction class）。</p>

<h2 id="上限">上限</h2>

<p>两者上限不同，</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">float</code>: <code class="language-plaintext highlighter-rouge">3e38</code></li>
  <li><code class="language-plaintext highlighter-rouge">double</code>: <code class="language-plaintext highlighter-rouge">1.7e308</code></li>
</ul>

<p>所以使用 <code class="language-plaintext highlighter-rouge">float</code> 出现瓶颈的概率会比 <code class="language-plaintext highlighter-rouge">double</code> 大些，特别是计算阶乘这种情况下。</p>

<h2 id="选择">选择</h2>

<p>而关于两者的选择，《C++ Primer》 是这样描述的：</p>

<blockquote>
  <p>“Use <code class="language-plaintext highlighter-rouge">double</code> for floating-point computations; <code class="language-plaintext highlighter-rouge">float</code> usually does not have enough precision, and the cost of double-precision calculations versus single-precision is negligible. In fact, on some machines, double-precision operations are faster than single. The precision offered by <code class="language-plaintext highlighter-rouge">long double</code> usually is unnecessary and often entails considerable run-time cost.”</p>

  <p><em>--Stanley B. Lippman. “C++ Primer, Fifth Edition (Jason Arnold’s Library).”</em></p>
</blockquote>

<p>鉴于 <code class="language-plaintext highlighter-rouge">float</code> 精度不够，对于有小数的情况建议使用 <code class="language-plaintext highlighter-rouge">double</code>。但考虑到性能， <code class="language-plaintext highlighter-rouge">long double</code> 性价比就不高了。</p>

<h2 id="相关资源">相关资源</h2>

<ul>
  <li><a href="https://stackoverflow.com/questions/2386772/what-is-the-difference-between-float-and-double">What is the difference between float and double?</a></li>
</ul>

:ET